#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
#define int long long
#define pb push_back
#define ppb pop_back
#define ff first
#define ss second
#define sz(s) (int)(s.size())
#define all(a) (a).begin(),(a).end()
#define pii pair<int,int>
#define deb(x) cout << #x << " = " << x << endl
#define endl '\n'
#define M 1000000007
const int INF = 1ll << 60;
using namespace std;

int findLen(string& A, int n, int k, char ch)
{
	int maxlen = 1;
	int cnt = 0;
	int l = 0, r = 0;

	// traverse the whole string
	while (r < n) {

		/* if character is not same as ch
		   increase count */
		if (A[r] != ch)
			++cnt;

		/* While  count > k  traverse the string
		   again until count becomes less than k
		   and decrease the count when characters
		   are not same */
		while (cnt > k) {
			if (A[l] != ch)
				--cnt;
			++l;
		}

		/* length of substring will be rightIndex -
		   leftIndex + 1. Compare this with the maximum
		   length and return maximum length */
		maxlen = max(maxlen, r - l + 1);
		++r;

		// deb(cnt);
		// deb(maxlen);
		// deb(r);
	}
	return maxlen;
}

void solve() {

	string s;
	cin >> s;

	int k;
	cin >> k;

	int y = 0;
	for (int i = 0; i < sz(s); ++i) {
		if (s[i] == 'X') y++;
	}

	if (y == 0) {
		cout << min(sz(s), k) << endl;
	}
	else {
		cout << max(0ll, findLen(s, sz(s), k, 'X')) << endl;
	}

}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int t = 1;
	// cin >> t;
	while (t--) {
		solve();
	}
}
